/*
 * Event Registry REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.ConceptTag;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse20013;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for AutosuggestApi
 */
@Ignore
public class AutosuggestApiTest {

    private final AutosuggestApi api = new AutosuggestApi();

    /**
     * Retrieve the category URI for a given category label/prefix
     *
     * Use the API to map the category label into the category URI that can be used when specifying the &#x60;categoryUri&#x60; filter in various API calls. The label can also be a partial name. The returned value will contain an array of candidates that match the input label. The returned list is sorted based on how frequently the category occurs in Event Registry data. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void suggestCategoriesFastTest() throws Exception {
        String apiKey = null;
        String prefix = null;
        List<InlineResponse20011> response = api.suggestCategoriesFast(apiKey, prefix);

        // TODO: test validations
    }
    /**
     * Retrieve the concept URI for a given concept label/prefix
     *
     * Use the API to map the concept label into the concept URI that can be used when specifying the &#x60;conceptUri&#x60; filter in various API calls. The label can also be a partial name. The returned value will contain an array of concepts that match the input label. The concepts are sorted based on how frequently they occur in Event Registry data. Most often, the first candidate is the value you want to use. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void suggestConceptsFastTest() throws Exception {
        String apiKey = null;
        String prefix = null;
        List<ConceptTag> response = api.suggestConceptsFast(apiKey, prefix);

        // TODO: test validations
    }
    /**
     * Retrieve the location URI for a given location name
     *
     * Use the API to map the location name (city or country) to a location URI that can be used when specifying the &#x60;locationUri&#x60; filter in various API calls. The location name can also be a partial name. The returned value will contain an array of location candidates that match the input label. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void suggestLocationsFastTest() throws Exception {
        String apiKey = null;
        String prefix = null;
        List<InlineResponse20013> response = api.suggestLocationsFast(apiKey, prefix);

        // TODO: test validations
    }
    /**
     * Retrieve the source URI for a given source name or url
     *
     * Use the API to map the source name or partial domain name to the source URI that can be used when specifying the &#x60;sourceUri&#x60; filter in various API calls. The source name can also be a partial name. The returned value will contain an array of source candidates that match the input label. The returned list is sorted based on the number of articles that we have collected from this source. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void suggestSourcesFastTest() throws Exception {
        String apiKey = null;
        String prefix = null;
        List<InlineResponse20012> response = api.suggestSourcesFast(apiKey, prefix);

        // TODO: test validations
    }
    /**
     * Retrieve the author URI for a given author name
     *
     * Use the API to map the author name to the author URI that can be used when specifying the &#x60;authorUri&#x60; filter in various API calls. Since it&#x27;s possible that there are multiple authors with the same name you can also specify the source domain name in the query (e.g. &#x27;amy more nytimes.com&#x27;) to make sure that the returned author will come from the news source of interest. The returned value will contain an array of author candidates that match the input name. The returned list is sorted based on the number of articles that we have collected from the author. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void suggestSourcesFast_0Test() throws Exception {
        String apiKey = null;
        String prefix = null;
        List<InlineResponse20012> response = api.suggestSourcesFast_0(apiKey, prefix);

        // TODO: test validations
    }
}
