/*
 * Event Registry REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.InlineResponse20010;
import io.swagger.client.model.InlineResponse2007;
import io.swagger.client.model.InlineResponse2008;
import io.swagger.client.model.InlineResponse2009;
import io.swagger.client.model.Query1;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for EventsApi
 */
@Ignore
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * Retrieve the list of breaking events
     *
     * Use this API endpoint to obtain a list of breaking events and their breaking score. The breaking events are events (a) that occured very recently, (b) for which we have collected many articles about them in a short time span and (c) for which the intensity of reporting is increasing.  Examples of use are provided on the **[examples page](https://eventregistry.org/documentation/examples#event-registry-api-examples-events-get-breaking-events)**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBreakingEventsTest() throws Exception {
        String apiKey = null;
        Integer breakingEventsCount = null;
        Integer breakingEventsPage = null;
        Double breakingEventsMinBreakingScore = null;
        Boolean includeEventTitle = null;
        Boolean includeEventSummary = null;
        Boolean includeEventSocialScore = null;
        Boolean includeEventSentiment = null;
        Boolean includeEventLocation = null;
        Boolean includeEventDate = null;
        Boolean includeEventArticleCounts = null;
        Boolean includeEventConcepts = null;
        Boolean includeEventCategories = null;
        Boolean includeEventCommonDates = null;
        Boolean includeEventStories = null;
        Integer eventImageCount = null;
        Boolean includeConceptLabel = null;
        Boolean includeConceptImage = null;
        Boolean includeConceptSynonyms = null;
        String conceptLang = null;
        Boolean includeStoryBasicStats = null;
        Boolean includeStoryTitle = null;
        Boolean includeStoryLocation = null;
        Boolean includeStoryDate = null;
        Boolean includeStoryConcepts = null;
        Boolean includeStoryCategories = null;
        Boolean includeStoryMedoidArticle = null;
        Boolean includeStoryCommonDates = null;
        Integer storyImageCount = null;
        Boolean includeCategoryParentUri = null;
        Boolean includeLocationPopulation = null;
        Boolean includeLocationGeoNamesId = null;
        Boolean includeLocationCountryArea = null;
        Boolean includeLocationCountryContinent = null;
        InlineResponse2008 response = api.getBreakingEvents(apiKey, breakingEventsCount, breakingEventsPage, breakingEventsMinBreakingScore, includeEventTitle, includeEventSummary, includeEventSocialScore, includeEventSentiment, includeEventLocation, includeEventDate, includeEventArticleCounts, includeEventConcepts, includeEventCategories, includeEventCommonDates, includeEventStories, eventImageCount, includeConceptLabel, includeConceptImage, includeConceptSynonyms, conceptLang, includeStoryBasicStats, includeStoryTitle, includeStoryLocation, includeStoryDate, includeStoryConcepts, includeStoryCategories, includeStoryMedoidArticle, includeStoryCommonDates, storyImageCount, includeCategoryParentUri, includeLocationPopulation, includeLocationGeoNamesId, includeLocationCountryArea, includeLocationCountryContinent);

        // TODO: test validations
    }
    /**
     * Obtain details about a single event
     *
     * The endpoint can be used to retrieve detailed information about a single event of interest. The event of interest should be provided with the &#x60;eventUri&#x60; parameter.  For each event you can retrieve multiple properties. The most common is retrieving the list of articles that discuss the event. Alternatively, you can also generate various summaries, by using some other &#x60;returnType&#x60; value. The &#x60;keywordAggr&#x60; return type will, for example, return the top keywords that are mentioned in the articles about the event.  If you would like retrieve only a subset of articles assigned to the event, you can do so by specifying one of the available filters (&#x60;keyword&#x60;, &#x60;conceptUri&#x60;, etc.).  Examples of use are provided on the **[examples page](https://eventregistry.org/documentation/examples#event-registry-api-examples-events-get-event)**. Details about the returned information is available on the **[data model page](https://github.com/EventRegistry/event-registry-python/wiki/Data-models)**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEventTest() throws Exception {
        String apiKey = null;
        String eventUri = null;
        String resultType = null;
        List<String> articlesLang = null;
        Boolean articlesIncludeDuplicates = null;
        List<String> keyword = null;
        List<String> conceptUri = null;
        List<String> categoryUri = null;
        List<String> sourceUri = null;
        List<String> sourceLocationUri = null;
        List<String> sourceGroupUri = null;
        List<String> authorUri = null;
        List<String> locationUri = null;
        List<String> lang = null;
        String dateStart = null;
        String dateEnd = null;
        String dateMentionStart = null;
        String dateMentionEnd = null;
        String keywordLoc = null;
        String keywordOper = null;
        String conceptOper = null;
        String categoryOper = null;
        Integer startSourceRankPercentile = null;
        Integer endSourceRankPercentile = null;
        Integer minSentimentArticle = null;
        Integer maxSentimentArticle = null;
        Boolean includeEventTitle = null;
        Boolean includeEventSummary = null;
        Boolean includeEventSocialScore = null;
        Boolean includeEventSentiment = null;
        Boolean includeEventLocation = null;
        Boolean includeEventDate = null;
        Boolean includeEventArticleCounts = null;
        Boolean includeEventConcepts = null;
        Boolean includeEventCategories = null;
        Boolean includeEventCommonDates = null;
        Boolean includeEventStories = null;
        Integer eventImageCount = null;
        Boolean includeConceptLabel = null;
        Boolean includeConceptImage = null;
        Boolean includeConceptSynonyms = null;
        Boolean includeConceptTrendingScore = null;
        String conceptLang = null;
        Boolean includeStoryBasicStats = null;
        Boolean includeStoryTitle = null;
        Boolean includeStoryLocation = null;
        Boolean includeStoryDate = null;
        Boolean includeStoryConcepts = null;
        Boolean includeStoryCategories = null;
        Boolean includeStoryMedoidArticle = null;
        Boolean includeStoryCommonDates = null;
        Integer storyImageCount = null;
        Boolean includeArticleTitle = null;
        Boolean includeArticleBasicInfo = null;
        Boolean includeArticleBody = null;
        Boolean includeArticleEventUri = null;
        Boolean includeArticleSocialScore = null;
        Boolean includeArticleSentiment = null;
        Boolean includeArticleConcepts = null;
        Boolean includeArticleCategories = null;
        Boolean includeArticleLocation = null;
        Boolean includeArticleImage = null;
        Boolean includeArticleAuthors = null;
        Boolean includeArticleVideos = null;
        Boolean includeArticleLinks = null;
        Boolean includeArticleExtractedDates = null;
        Boolean includeArticleDuplicateList = null;
        Boolean includeArticleOriginalArticle = null;
        Integer articleBodyLen = null;
        Boolean includeSourceTitle = null;
        Boolean includeSourceDescription = null;
        Boolean includeSourceLocation = null;
        Boolean includeSourceRanking = null;
        Boolean includeLocationPopulation = null;
        Boolean includeLocationGeoNamesId = null;
        Boolean includeLocationCountryArea = null;
        Boolean includeLocationCountryContinent = null;
        InlineResponse2009 response = api.getEvent(apiKey, eventUri, resultType, articlesLang, articlesIncludeDuplicates, keyword, conceptUri, categoryUri, sourceUri, sourceLocationUri, sourceGroupUri, authorUri, locationUri, lang, dateStart, dateEnd, dateMentionStart, dateMentionEnd, keywordLoc, keywordOper, conceptOper, categoryOper, startSourceRankPercentile, endSourceRankPercentile, minSentimentArticle, maxSentimentArticle, includeEventTitle, includeEventSummary, includeEventSocialScore, includeEventSentiment, includeEventLocation, includeEventDate, includeEventArticleCounts, includeEventConcepts, includeEventCategories, includeEventCommonDates, includeEventStories, eventImageCount, includeConceptLabel, includeConceptImage, includeConceptSynonyms, includeConceptTrendingScore, conceptLang, includeStoryBasicStats, includeStoryTitle, includeStoryLocation, includeStoryDate, includeStoryConcepts, includeStoryCategories, includeStoryMedoidArticle, includeStoryCommonDates, storyImageCount, includeArticleTitle, includeArticleBasicInfo, includeArticleBody, includeArticleEventUri, includeArticleSocialScore, includeArticleSentiment, includeArticleConcepts, includeArticleCategories, includeArticleLocation, includeArticleImage, includeArticleAuthors, includeArticleVideos, includeArticleLinks, includeArticleExtractedDates, includeArticleDuplicateList, includeArticleOriginalArticle, articleBodyLen, includeSourceTitle, includeSourceDescription, includeSourceLocation, includeSourceRanking, includeLocationPopulation, includeLocationGeoNamesId, includeLocationCountryArea, includeLocationCountryContinent);

        // TODO: test validations
    }
    /**
     * Retrieve a list of events that match one or more search conditions
     *
     * Identify the world events that match a certain set of search criteria.  The search conditions can be specified by setting the &#x60;query&#x60; parameter, or by specifying one or multiple search parameters, such as &#x60;keyword&#x60;, &#x60;conceptUri&#x60;, &#x60;sourceUri&#x60;, etc. To remove some of the results matching the *positive* conditions, you can specify some *negative* conditions using &#x60;ignoreKeyword&#x60;, &#x60;ignoreSourceUri&#x60;, and other &#x60;ignore*&#x60; parameters.  The results of the search can be the list of matching events (when &#x60;resultType &#x3D; events&#x60;) or one of the various aggregates (summaries) of the matching events. In case of &#x60;resultType &#x3D; locAggr&#x60;, for example, the returned data will contain the geographic locations where the events matching criteria occured.  Examples of use are provided on the **[examples page](https://eventregistry.org/documentation/examples#event-registry-api-examples-events-get-events)**. Details about the returned information is available on the **[data model page](https://github.com/EventRegistry/event-registry-python/wiki/Data-models)**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws Exception {
        String apiKey = null;
        List<String> resultType = null;
        Integer eventsPage = null;
        Integer eventsCount = null;
        String eventsSortBy = null;
        Boolean eventsSortByAsc = null;
        Query1 query = null;
        List<String> keyword = null;
        List<String> conceptUri = null;
        List<String> categoryUri = null;
        List<String> sourceUri = null;
        List<String> sourceLocationUri = null;
        List<String> sourceGroupUri = null;
        List<String> authorUri = null;
        List<String> locationUri = null;
        List<String> lang = null;
        String dateStart = null;
        String dateEnd = null;
        Integer minSentimentEvent = null;
        Integer maxSentimentEvent = null;
        Integer minArticlesInEvent = null;
        Integer maxArticlesInEvent = null;
        String reportingDateStart = null;
        String reportingDateEnd = null;
        String dateMentionStart = null;
        String dateMentionEnd = null;
        String keywordLoc = null;
        String keywordOper = null;
        String conceptOper = null;
        String categoryOper = null;
        List<String> ignoreKeyword = null;
        List<String> ignoreConceptUri = null;
        List<String> ignoreCategoryUri = null;
        List<String> ignoreSourceUri = null;
        List<String> ignoreSourceLocationUri = null;
        List<String> ignoreSourceGroupUri = null;
        List<String> ignoreAuthorUri = null;
        List<String> ignoreLocationUri = null;
        List<String> ignoreLang = null;
        String ignoreKeywordLoc = null;
        Boolean includeEventTitle = null;
        Boolean includeEventSummary = null;
        Boolean includeEventSocialScore = null;
        Boolean includeEventSentiment = null;
        Boolean includeEventLocation = null;
        Boolean includeEventDate = null;
        Boolean includeEventArticleCounts = null;
        Boolean includeEventConcepts = null;
        Boolean includeEventCategories = null;
        Boolean includeEventCommonDates = null;
        Boolean includeEventStories = null;
        Integer eventImageCount = null;
        Boolean includeConceptLabel = null;
        Boolean includeConceptImage = null;
        Boolean includeConceptSynonyms = null;
        String conceptLang = null;
        Boolean includeStoryBasicStats = null;
        Boolean includeStoryTitle = null;
        Boolean includeStoryLocation = null;
        Boolean includeStoryDate = null;
        Boolean includeStoryConcepts = null;
        Boolean includeStoryCategories = null;
        Boolean includeStoryMedoidArticle = null;
        Boolean includeStoryCommonDates = null;
        Integer storyImageCount = null;
        Boolean includeCategoryParentUri = null;
        Boolean includeLocationPopulation = null;
        Boolean includeLocationGeoNamesId = null;
        Boolean includeLocationCountryArea = null;
        Boolean includeLocationCountryContinent = null;
        InlineResponse2007 response = api.getEvents(apiKey, resultType, eventsPage, eventsCount, eventsSortBy, eventsSortByAsc, query, keyword, conceptUri, categoryUri, sourceUri, sourceLocationUri, sourceGroupUri, authorUri, locationUri, lang, dateStart, dateEnd, minSentimentEvent, maxSentimentEvent, minArticlesInEvent, maxArticlesInEvent, reportingDateStart, reportingDateEnd, dateMentionStart, dateMentionEnd, keywordLoc, keywordOper, conceptOper, categoryOper, ignoreKeyword, ignoreConceptUri, ignoreCategoryUri, ignoreSourceUri, ignoreSourceLocationUri, ignoreSourceGroupUri, ignoreAuthorUri, ignoreLocationUri, ignoreLang, ignoreKeywordLoc, includeEventTitle, includeEventSummary, includeEventSocialScore, includeEventSentiment, includeEventLocation, includeEventDate, includeEventArticleCounts, includeEventConcepts, includeEventCategories, includeEventCommonDates, includeEventStories, eventImageCount, includeConceptLabel, includeConceptImage, includeConceptSynonyms, conceptLang, includeStoryBasicStats, includeStoryTitle, includeStoryLocation, includeStoryDate, includeStoryConcepts, includeStoryCategories, includeStoryMedoidArticle, includeStoryCommonDates, storyImageCount, includeCategoryParentUri, includeLocationPopulation, includeLocationGeoNamesId, includeLocationCountryArea, includeLocationCountryContinent);

        // TODO: test validations
    }
    /**
     * Obtain events that match a user generated topic page
     *
     * Retrieve the events that match the topic page the user generated on the [monitoring page](https://eventregistry.org/monitoring).  The topic page has to be created using the web interface and can be defined by a list of concepts, keywords, news sources, categories and other available conditions. Each topic page has a uniqe id, called a URI. When you open the topic page, the URI is displayed in the url in the browser. Use that URI as the &#x60;uri&#x60; parameter when making the API calls.  Compared to the &#x60;getEvents&#x60; endpoint, this endpoint is well suited when you want to find events that match a broader topic that can be defined using a set of concepts and keywords. These concepts and keywords don&#x27;t all need to be mentioned in an event, but the more of them are mentioned, the higher will the event be in the list of results. By default, the returned events are sorted based on how well they match the topic, but you can also change the sorting by setting the &#x60;eventsSortBy&#x60; parameter.  The results of the search can be the list of matching events (when &#x60;resultType &#x3D; events&#x60;, default) or one of the various aggregates (summaries) of the matching events. In case of &#x60;resultType &#x3D; timeAggr&#x60;, for example, the returned data will contain information *when* the matching events occurred.  Details about the returned information is available on the **[data model page](https://github.com/EventRegistry/event-registry-python/wiki/Data-models)**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getEventsForTopicPageTest() throws Exception {
        String apiKey = null;
        String uri = null;
        String resultType = null;
        Integer eventsPage = null;
        Integer eventsCount = null;
        String eventsSortBy = null;
        Boolean eventsSortByAsc = null;
        Boolean includeEventTitle = null;
        Boolean includeEventSummary = null;
        Boolean includeEventSocialScore = null;
        Boolean includeEventSentiment = null;
        Boolean includeEventLocation = null;
        Boolean includeEventDate = null;
        Boolean includeEventArticleCounts = null;
        Boolean includeEventConcepts = null;
        Boolean includeEventCategories = null;
        Boolean includeEventCommonDates = null;
        Boolean includeEventStories = null;
        Integer eventImageCount = null;
        Boolean includeConceptLabel = null;
        Boolean includeConceptImage = null;
        Boolean includeConceptSynonyms = null;
        String conceptLang = null;
        Boolean includeStoryBasicStats = null;
        Boolean includeStoryTitle = null;
        Boolean includeStoryLocation = null;
        Boolean includeStoryDate = null;
        Boolean includeStoryConcepts = null;
        Boolean includeStoryCategories = null;
        Boolean includeStoryMedoidArticle = null;
        Boolean includeStoryCommonDates = null;
        Integer storyImageCount = null;
        Boolean includeCategoryParentUri = null;
        Boolean includeLocationPopulation = null;
        Boolean includeLocationGeoNamesId = null;
        Boolean includeLocationCountryArea = null;
        Boolean includeLocationCountryContinent = null;
        InlineResponse2008 response = api.getEventsForTopicPage(apiKey, uri, resultType, eventsPage, eventsCount, eventsSortBy, eventsSortByAsc, includeEventTitle, includeEventSummary, includeEventSocialScore, includeEventSentiment, includeEventLocation, includeEventDate, includeEventArticleCounts, includeEventConcepts, includeEventCategories, includeEventCommonDates, includeEventStories, eventImageCount, includeConceptLabel, includeConceptImage, includeConceptSynonyms, conceptLang, includeStoryBasicStats, includeStoryTitle, includeStoryLocation, includeStoryDate, includeStoryConcepts, includeStoryCategories, includeStoryMedoidArticle, includeStoryCommonDates, storyImageCount, includeCategoryParentUri, includeLocationPopulation, includeLocationGeoNamesId, includeLocationCountryArea, includeLocationCountryContinent);

        // TODO: test validations
    }
    /**
     * The stream of events that were added or updated in the last minute
     *
     * The API endpoint allows the user to obtain the full list of events that were added or updated in Event Registry in the last minute. This is the only API call that also allows returning more than 50 events per call. If more than 50 events are returned, then correspondingly higher number of tokens are used per call.  Without any additional filters, the API will return *all* events added/updated in the last minute. By specifying filters like &#x60;lang&#x60;, &#x60;keyword&#x60;, &#x60;conceptUri&#x60; and others, you can however limit the returned content to only the subset that matches these filters.  Examples of use are provided on the **[examples page](https://eventregistry.org/documentation/examples#event-registry-api-examples-events-minute-stream-events)**. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void minuteStreamEventsTest() throws Exception {
        String apiKey = null;
        Integer recentActivityEventsMaxEventCount = null;
        Integer recentActivityEventsUpdatesAfterMinsAgo = null;
        String recentActivityEventsUpdatesAfterTm = null;
        List<String> keyword = null;
        List<String> conceptUri = null;
        List<String> categoryUri = null;
        List<String> sourceUri = null;
        List<String> sourceLocationUri = null;
        List<String> sourceGroupUri = null;
        List<String> authorUri = null;
        List<String> locationUri = null;
        String keywordLoc = null;
        String keywordOper = null;
        String conceptOper = null;
        String categoryOper = null;
        List<String> lang = null;
        Integer minArticlesInEvent = null;
        Integer maxArticlesInEvent = null;
        InlineResponse20010 response = api.minuteStreamEvents(apiKey, recentActivityEventsMaxEventCount, recentActivityEventsUpdatesAfterMinsAgo, recentActivityEventsUpdatesAfterTm, keyword, conceptUri, categoryUri, sourceUri, sourceLocationUri, sourceGroupUri, authorUri, locationUri, keywordLoc, keywordOper, conceptOper, categoryOper, lang, minArticlesInEvent, maxArticlesInEvent);

        // TODO: test validations
    }
}
