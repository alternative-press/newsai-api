/*
 * Event Registry REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OtherApi {
    private ApiClient apiClient;

    public OtherApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OtherApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getEventForTextenqueueRequest
     * @param apiKey Your API key (required)
     * @param text Text for which to find the most related event (required)
     * @param lang The language in which the provided &#x60;text&#x60; is. (required)
     * @param resultType Choose what kind of information about the events should be returned. Default value: info. (optional, default to info)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventForTextenqueueRequestCall(String apiKey, String text, String lang, String resultType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/getEventForText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));
        if (resultType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resultType", resultType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventForTextenqueueRequestValidateBeforeCall(String apiKey, String text, String lang, String resultType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getEventForTextenqueueRequest(Async)");
        }
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling getEventForTextenqueueRequest(Async)");
        }
        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling getEventForTextenqueueRequest(Async)");
        }
        
        com.squareup.okhttp.Call call = getEventForTextenqueueRequestCall(apiKey, text, lang, resultType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Identify a recent event that best matches your input text and return a list of articles about the event
     * Given a paragraph or a longer text, the API endpoint can provide you the recent event that best matches the text. The return value will contain the URI of the event that is most related to the text and the value will contain the list of articles about the event. 
     * @param apiKey Your API key (required)
     * @param text Text for which to find the most related event (required)
     * @param lang The language in which the provided &#x60;text&#x60; is. (required)
     * @param resultType Choose what kind of information about the events should be returned. Default value: info. (optional, default to info)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getEventForTextenqueueRequest(String apiKey, String text, String lang, String resultType) throws ApiException {
        ApiResponse<String> resp = getEventForTextenqueueRequestWithHttpInfo(apiKey, text, lang, resultType);
        return resp.getData();
    }

    /**
     * Identify a recent event that best matches your input text and return a list of articles about the event
     * Given a paragraph or a longer text, the API endpoint can provide you the recent event that best matches the text. The return value will contain the URI of the event that is most related to the text and the value will contain the list of articles about the event. 
     * @param apiKey Your API key (required)
     * @param text Text for which to find the most related event (required)
     * @param lang The language in which the provided &#x60;text&#x60; is. (required)
     * @param resultType Choose what kind of information about the events should be returned. Default value: info. (optional, default to info)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getEventForTextenqueueRequestWithHttpInfo(String apiKey, String text, String lang, String resultType) throws ApiException {
        com.squareup.okhttp.Call call = getEventForTextenqueueRequestValidateBeforeCall(apiKey, text, lang, resultType, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Identify a recent event that best matches your input text and return a list of articles about the event (asynchronously)
     * Given a paragraph or a longer text, the API endpoint can provide you the recent event that best matches the text. The return value will contain the URI of the event that is most related to the text and the value will contain the list of articles about the event. 
     * @param apiKey Your API key (required)
     * @param text Text for which to find the most related event (required)
     * @param lang The language in which the provided &#x60;text&#x60; is. (required)
     * @param resultType Choose what kind of information about the events should be returned. Default value: info. (optional, default to info)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventForTextenqueueRequestAsync(String apiKey, String text, String lang, String resultType, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventForTextenqueueRequestValidateBeforeCall(apiKey, text, lang, resultType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
