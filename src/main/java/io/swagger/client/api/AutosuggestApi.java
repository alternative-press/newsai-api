/*
 * Event Registry REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ConceptTag;
import io.swagger.client.model.InlineResponse20011;
import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse20013;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutosuggestApi {
    private ApiClient apiClient;

    public AutosuggestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutosuggestApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for suggestCategoriesFast
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suggestCategoriesFastCall(String apiKey, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/suggestCategoriesFast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prefix", prefix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suggestCategoriesFastValidateBeforeCall(String apiKey, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling suggestCategoriesFast(Async)");
        }
        
        com.squareup.okhttp.Call call = suggestCategoriesFastCall(apiKey, prefix, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the category URI for a given category label/prefix
     * Use the API to map the category label into the category URI that can be used when specifying the &#x60;categoryUri&#x60; filter in various API calls. The label can also be a partial name. The returned value will contain an array of candidates that match the input label. The returned list is sorted based on how frequently the category occurs in Event Registry data. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @return List&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20011> suggestCategoriesFast(String apiKey, String prefix) throws ApiException {
        ApiResponse<List<InlineResponse20011>> resp = suggestCategoriesFastWithHttpInfo(apiKey, prefix);
        return resp.getData();
    }

    /**
     * Retrieve the category URI for a given category label/prefix
     * Use the API to map the category label into the category URI that can be used when specifying the &#x60;categoryUri&#x60; filter in various API calls. The label can also be a partial name. The returned value will contain an array of candidates that match the input label. The returned list is sorted based on how frequently the category occurs in Event Registry data. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse20011&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20011>> suggestCategoriesFastWithHttpInfo(String apiKey, String prefix) throws ApiException {
        com.squareup.okhttp.Call call = suggestCategoriesFastValidateBeforeCall(apiKey, prefix, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20011>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the category URI for a given category label/prefix (asynchronously)
     * Use the API to map the category label into the category URI that can be used when specifying the &#x60;categoryUri&#x60; filter in various API calls. The label can also be a partial name. The returned value will contain an array of candidates that match the input label. The returned list is sorted based on how frequently the category occurs in Event Registry data. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suggestCategoriesFastAsync(String apiKey, String prefix, final ApiCallback<List<InlineResponse20011>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suggestCategoriesFastValidateBeforeCall(apiKey, prefix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20011>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suggestConceptsFast
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suggestConceptsFastCall(String apiKey, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/suggestConceptsFast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prefix", prefix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suggestConceptsFastValidateBeforeCall(String apiKey, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling suggestConceptsFast(Async)");
        }
        
        com.squareup.okhttp.Call call = suggestConceptsFastCall(apiKey, prefix, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the concept URI for a given concept label/prefix
     * Use the API to map the concept label into the concept URI that can be used when specifying the &#x60;conceptUri&#x60; filter in various API calls. The label can also be a partial name. The returned value will contain an array of concepts that match the input label. The concepts are sorted based on how frequently they occur in Event Registry data. Most often, the first candidate is the value you want to use. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @return List&lt;ConceptTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConceptTag> suggestConceptsFast(String apiKey, String prefix) throws ApiException {
        ApiResponse<List<ConceptTag>> resp = suggestConceptsFastWithHttpInfo(apiKey, prefix);
        return resp.getData();
    }

    /**
     * Retrieve the concept URI for a given concept label/prefix
     * Use the API to map the concept label into the concept URI that can be used when specifying the &#x60;conceptUri&#x60; filter in various API calls. The label can also be a partial name. The returned value will contain an array of concepts that match the input label. The concepts are sorted based on how frequently they occur in Event Registry data. Most often, the first candidate is the value you want to use. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @return ApiResponse&lt;List&lt;ConceptTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConceptTag>> suggestConceptsFastWithHttpInfo(String apiKey, String prefix) throws ApiException {
        com.squareup.okhttp.Call call = suggestConceptsFastValidateBeforeCall(apiKey, prefix, null, null);
        Type localVarReturnType = new TypeToken<List<ConceptTag>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the concept URI for a given concept label/prefix (asynchronously)
     * Use the API to map the concept label into the concept URI that can be used when specifying the &#x60;conceptUri&#x60; filter in various API calls. The label can also be a partial name. The returned value will contain an array of concepts that match the input label. The concepts are sorted based on how frequently they occur in Event Registry data. Most often, the first candidate is the value you want to use. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suggestConceptsFastAsync(String apiKey, String prefix, final ApiCallback<List<ConceptTag>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suggestConceptsFastValidateBeforeCall(apiKey, prefix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConceptTag>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suggestLocationsFast
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suggestLocationsFastCall(String apiKey, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/suggestLocationsFast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prefix", prefix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suggestLocationsFastValidateBeforeCall(String apiKey, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling suggestLocationsFast(Async)");
        }
        
        com.squareup.okhttp.Call call = suggestLocationsFastCall(apiKey, prefix, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the location URI for a given location name
     * Use the API to map the location name (city or country) to a location URI that can be used when specifying the &#x60;locationUri&#x60; filter in various API calls. The location name can also be a partial name. The returned value will contain an array of location candidates that match the input label. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @return List&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20013> suggestLocationsFast(String apiKey, String prefix) throws ApiException {
        ApiResponse<List<InlineResponse20013>> resp = suggestLocationsFastWithHttpInfo(apiKey, prefix);
        return resp.getData();
    }

    /**
     * Retrieve the location URI for a given location name
     * Use the API to map the location name (city or country) to a location URI that can be used when specifying the &#x60;locationUri&#x60; filter in various API calls. The location name can also be a partial name. The returned value will contain an array of location candidates that match the input label. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse20013&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20013>> suggestLocationsFastWithHttpInfo(String apiKey, String prefix) throws ApiException {
        com.squareup.okhttp.Call call = suggestLocationsFastValidateBeforeCall(apiKey, prefix, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20013>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the location URI for a given location name (asynchronously)
     * Use the API to map the location name (city or country) to a location URI that can be used when specifying the &#x60;locationUri&#x60; filter in various API calls. The location name can also be a partial name. The returned value will contain an array of location candidates that match the input label. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suggestLocationsFastAsync(String apiKey, String prefix, final ApiCallback<List<InlineResponse20013>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suggestLocationsFastValidateBeforeCall(apiKey, prefix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20013>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suggestSourcesFast
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suggestSourcesFastCall(String apiKey, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/suggestSourcesFast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prefix", prefix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suggestSourcesFastValidateBeforeCall(String apiKey, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling suggestSourcesFast(Async)");
        }
        
        com.squareup.okhttp.Call call = suggestSourcesFastCall(apiKey, prefix, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the source URI for a given source name or url
     * Use the API to map the source name or partial domain name to the source URI that can be used when specifying the &#x60;sourceUri&#x60; filter in various API calls. The source name can also be a partial name. The returned value will contain an array of source candidates that match the input label. The returned list is sorted based on the number of articles that we have collected from this source. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @return List&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20012> suggestSourcesFast(String apiKey, String prefix) throws ApiException {
        ApiResponse<List<InlineResponse20012>> resp = suggestSourcesFastWithHttpInfo(apiKey, prefix);
        return resp.getData();
    }

    /**
     * Retrieve the source URI for a given source name or url
     * Use the API to map the source name or partial domain name to the source URI that can be used when specifying the &#x60;sourceUri&#x60; filter in various API calls. The source name can also be a partial name. The returned value will contain an array of source candidates that match the input label. The returned list is sorted based on the number of articles that we have collected from this source. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse20012&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20012>> suggestSourcesFastWithHttpInfo(String apiKey, String prefix) throws ApiException {
        com.squareup.okhttp.Call call = suggestSourcesFastValidateBeforeCall(apiKey, prefix, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20012>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the source URI for a given source name or url (asynchronously)
     * Use the API to map the source name or partial domain name to the source URI that can be used when specifying the &#x60;sourceUri&#x60; filter in various API calls. The source name can also be a partial name. The returned value will contain an array of source candidates that match the input label. The returned list is sorted based on the number of articles that we have collected from this source. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suggestSourcesFastAsync(String apiKey, String prefix, final ApiCallback<List<InlineResponse20012>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suggestSourcesFastValidateBeforeCall(apiKey, prefix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20012>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suggestSourcesFast_0
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suggestSourcesFast_0Call(String apiKey, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v1/suggestAuthorsFast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (prefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("prefix", prefix));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suggestSourcesFast_0ValidateBeforeCall(String apiKey, String prefix, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling suggestSourcesFast_0(Async)");
        }
        
        com.squareup.okhttp.Call call = suggestSourcesFast_0Call(apiKey, prefix, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve the author URI for a given author name
     * Use the API to map the author name to the author URI that can be used when specifying the &#x60;authorUri&#x60; filter in various API calls. Since it&#x27;s possible that there are multiple authors with the same name you can also specify the source domain name in the query (e.g. &#x27;amy more nytimes.com&#x27;) to make sure that the returned author will come from the news source of interest. The returned value will contain an array of author candidates that match the input name. The returned list is sorted based on the number of articles that we have collected from the author. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @return List&lt;InlineResponse20012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InlineResponse20012> suggestSourcesFast_0(String apiKey, String prefix) throws ApiException {
        ApiResponse<List<InlineResponse20012>> resp = suggestSourcesFast_0WithHttpInfo(apiKey, prefix);
        return resp.getData();
    }

    /**
     * Retrieve the author URI for a given author name
     * Use the API to map the author name to the author URI that can be used when specifying the &#x60;authorUri&#x60; filter in various API calls. Since it&#x27;s possible that there are multiple authors with the same name you can also specify the source domain name in the query (e.g. &#x27;amy more nytimes.com&#x27;) to make sure that the returned author will come from the news source of interest. The returned value will contain an array of author candidates that match the input name. The returned list is sorted based on the number of articles that we have collected from the author. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @return ApiResponse&lt;List&lt;InlineResponse20012&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InlineResponse20012>> suggestSourcesFast_0WithHttpInfo(String apiKey, String prefix) throws ApiException {
        com.squareup.okhttp.Call call = suggestSourcesFast_0ValidateBeforeCall(apiKey, prefix, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse20012>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve the author URI for a given author name (asynchronously)
     * Use the API to map the author name to the author URI that can be used when specifying the &#x60;authorUri&#x60; filter in various API calls. Since it&#x27;s possible that there are multiple authors with the same name you can also specify the source domain name in the query (e.g. &#x27;amy more nytimes.com&#x27;) to make sure that the returned author will come from the news source of interest. The returned value will contain an array of author candidates that match the input name. The returned list is sorted based on the number of articles that we have collected from the author. 
     * @param apiKey Your API key (required)
     * @param prefix Determine the search condition. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suggestSourcesFast_0Async(String apiKey, String prefix, final ApiCallback<List<InlineResponse20012>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suggestSourcesFast_0ValidateBeforeCall(apiKey, prefix, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse20012>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
