/*
 * Event Registry REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConceptTag;
import io.swagger.client.model.Label;
import io.swagger.client.model.Location;
import io.swagger.client.model.TrendingScore;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Concept
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-06-03T18:38:48.218840542Z[GMT]")

public class Concept extends ConceptTag {
  @SerializedName("image")
  private String image = null;

  @SerializedName("synonyms")
  private Object synonyms = null;

  @SerializedName("trendingScore")
  private TrendingScore trendingScore = null;

  @SerializedName("location")
  private Location location = null;

  public Concept image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public Concept synonyms(Object synonyms) {
    this.synonyms = synonyms;
    return this;
  }

   /**
   * Get synonyms
   * @return synonyms
  **/
  @Schema(description = "")
  public Object getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(Object synonyms) {
    this.synonyms = synonyms;
  }

  public Concept trendingScore(TrendingScore trendingScore) {
    this.trendingScore = trendingScore;
    return this;
  }

   /**
   * Get trendingScore
   * @return trendingScore
  **/
  @Schema(description = "")
  public TrendingScore getTrendingScore() {
    return trendingScore;
  }

  public void setTrendingScore(TrendingScore trendingScore) {
    this.trendingScore = trendingScore;
  }

  public Concept location(Location location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @Schema(description = "")
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Concept concept = (Concept) o;
    return Objects.equals(this.image, concept.image) &&
        Objects.equals(this.synonyms, concept.synonyms) &&
        Objects.equals(this.trendingScore, concept.trendingScore) &&
        Objects.equals(this.location, concept.location) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, synonyms, trendingScore, location, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Concept {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    trendingScore: ").append(toIndentedString(trendingScore)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
