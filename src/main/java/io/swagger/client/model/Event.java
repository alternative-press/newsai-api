/*
 * Event Registry REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 8.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CategoryTag;
import io.swagger.client.model.Concept;
import io.swagger.client.model.EventArticleCounts;
import io.swagger.client.model.Label;
import io.swagger.client.model.Location;
import io.swagger.client.model.Story;
import io.swagger.client.model.StoryCommonDates;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Event
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-06-03T18:38:48.218840542Z[GMT]")

public class Event {
  @SerializedName("uri")
  private String uri = null;

  @SerializedName("concepts")
  private List<Concept> concepts = null;

  @SerializedName("stories")
  private List<Story> stories = null;

  @SerializedName("eventDate")
  private String eventDate = null;

  @SerializedName("totalArticleCount")
  private Integer totalArticleCount = null;

  @SerializedName("title")
  private Label title = null;

  @SerializedName("summary")
  private Label summary = null;

  @SerializedName("location")
  private Location location = null;

  @SerializedName("categories")
  private CategoryTag categories = null;

  @SerializedName("images")
  private List<String> images = null;

  @SerializedName("articleCounts")
  private EventArticleCounts articleCounts = null;

  @SerializedName("socialScore")
  private Double socialScore = null;

  @SerializedName("commonDates")
  private List<StoryCommonDates> commonDates = null;

  @SerializedName("wgt")
  private Integer wgt = null;

  public Event uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * Get uri
   * @return uri
  **/
  @Schema(description = "")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public Event concepts(List<Concept> concepts) {
    this.concepts = concepts;
    return this;
  }

  public Event addConceptsItem(Concept conceptsItem) {
    if (this.concepts == null) {
      this.concepts = new ArrayList<Concept>();
    }
    this.concepts.add(conceptsItem);
    return this;
  }

   /**
   * Get concepts
   * @return concepts
  **/
  @Schema(description = "")
  public List<Concept> getConcepts() {
    return concepts;
  }

  public void setConcepts(List<Concept> concepts) {
    this.concepts = concepts;
  }

  public Event stories(List<Story> stories) {
    this.stories = stories;
    return this;
  }

  public Event addStoriesItem(Story storiesItem) {
    if (this.stories == null) {
      this.stories = new ArrayList<Story>();
    }
    this.stories.add(storiesItem);
    return this;
  }

   /**
   * Get stories
   * @return stories
  **/
  @Schema(description = "")
  public List<Story> getStories() {
    return stories;
  }

  public void setStories(List<Story> stories) {
    this.stories = stories;
  }

  public Event eventDate(String eventDate) {
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Get eventDate
   * @return eventDate
  **/
  @Schema(description = "")
  public String getEventDate() {
    return eventDate;
  }

  public void setEventDate(String eventDate) {
    this.eventDate = eventDate;
  }

  public Event totalArticleCount(Integer totalArticleCount) {
    this.totalArticleCount = totalArticleCount;
    return this;
  }

   /**
   * Get totalArticleCount
   * @return totalArticleCount
  **/
  @Schema(description = "")
  public Integer getTotalArticleCount() {
    return totalArticleCount;
  }

  public void setTotalArticleCount(Integer totalArticleCount) {
    this.totalArticleCount = totalArticleCount;
  }

  public Event title(Label title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @Schema(description = "")
  public Label getTitle() {
    return title;
  }

  public void setTitle(Label title) {
    this.title = title;
  }

  public Event summary(Label summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @Schema(description = "")
  public Label getSummary() {
    return summary;
  }

  public void setSummary(Label summary) {
    this.summary = summary;
  }

  public Event location(Location location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @Schema(description = "")
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }

  public Event categories(CategoryTag categories) {
    this.categories = categories;
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @Schema(description = "")
  public CategoryTag getCategories() {
    return categories;
  }

  public void setCategories(CategoryTag categories) {
    this.categories = categories;
  }

  public Event images(List<String> images) {
    this.images = images;
    return this;
  }

  public Event addImagesItem(String imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<String>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @Schema(description = "")
  public List<String> getImages() {
    return images;
  }

  public void setImages(List<String> images) {
    this.images = images;
  }

  public Event articleCounts(EventArticleCounts articleCounts) {
    this.articleCounts = articleCounts;
    return this;
  }

   /**
   * Get articleCounts
   * @return articleCounts
  **/
  @Schema(description = "")
  public EventArticleCounts getArticleCounts() {
    return articleCounts;
  }

  public void setArticleCounts(EventArticleCounts articleCounts) {
    this.articleCounts = articleCounts;
  }

  public Event socialScore(Double socialScore) {
    this.socialScore = socialScore;
    return this;
  }

   /**
   * Get socialScore
   * @return socialScore
  **/
  @Schema(description = "")
  public Double getSocialScore() {
    return socialScore;
  }

  public void setSocialScore(Double socialScore) {
    this.socialScore = socialScore;
  }

  public Event commonDates(List<StoryCommonDates> commonDates) {
    this.commonDates = commonDates;
    return this;
  }

  public Event addCommonDatesItem(StoryCommonDates commonDatesItem) {
    if (this.commonDates == null) {
      this.commonDates = new ArrayList<StoryCommonDates>();
    }
    this.commonDates.add(commonDatesItem);
    return this;
  }

   /**
   * Get commonDates
   * @return commonDates
  **/
  @Schema(description = "")
  public List<StoryCommonDates> getCommonDates() {
    return commonDates;
  }

  public void setCommonDates(List<StoryCommonDates> commonDates) {
    this.commonDates = commonDates;
  }

  public Event wgt(Integer wgt) {
    this.wgt = wgt;
    return this;
  }

   /**
   * Get wgt
   * @return wgt
  **/
  @Schema(description = "")
  public Integer getWgt() {
    return wgt;
  }

  public void setWgt(Integer wgt) {
    this.wgt = wgt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.uri, event.uri) &&
        Objects.equals(this.concepts, event.concepts) &&
        Objects.equals(this.stories, event.stories) &&
        Objects.equals(this.eventDate, event.eventDate) &&
        Objects.equals(this.totalArticleCount, event.totalArticleCount) &&
        Objects.equals(this.title, event.title) &&
        Objects.equals(this.summary, event.summary) &&
        Objects.equals(this.location, event.location) &&
        Objects.equals(this.categories, event.categories) &&
        Objects.equals(this.images, event.images) &&
        Objects.equals(this.articleCounts, event.articleCounts) &&
        Objects.equals(this.socialScore, event.socialScore) &&
        Objects.equals(this.commonDates, event.commonDates) &&
        Objects.equals(this.wgt, event.wgt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uri, concepts, stories, eventDate, totalArticleCount, title, summary, location, categories, images, articleCounts, socialScore, commonDates, wgt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    concepts: ").append(toIndentedString(concepts)).append("\n");
    sb.append("    stories: ").append(toIndentedString(stories)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    totalArticleCount: ").append(toIndentedString(totalArticleCount)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    articleCounts: ").append(toIndentedString(articleCounts)).append("\n");
    sb.append("    socialScore: ").append(toIndentedString(socialScore)).append("\n");
    sb.append("    commonDates: ").append(toIndentedString(commonDates)).append("\n");
    sb.append("    wgt: ").append(toIndentedString(wgt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
